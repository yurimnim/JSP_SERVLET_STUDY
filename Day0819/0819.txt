<<jsp>>
Java Server Page
==> 자바를 이용하여 웹어플리케이션을 만들기 위한 기술 
==> 자바 프로그램으로 동적인 html을 만드는 것이 목적
==> 웹프로그래밍
==> 동적인 html을 만드는 것이 목적 

<<자바 기반의 웹프로그래밍 기술>>
- 서블릿 ==> 서블릿 클래스를 상속받아 필요한 메소드를 오버라이딩 하고 
	컴파일된 파일을 배포하여 서비스 하는 과정이 필요하다. 이것이 어렵고 번거롭다.

- jsp ==> 서블릿 보다는 쉽게 html 과 자바 문법을 혼용하여 동적인 html을 만들 수 있다. 
프로젝트 규모가 커지고 사용자 요구가 복잡해짐에 따라  jsp 만으로는 더이상 협업이 어려워지고 
유지보수 하기에 무리가 있다. 

==> jsp에서 자바문법을 걷어내자! 
MVC 패턴을 이용하자. 
Model View Controller
온갖 자바문법들은 별도의 자바 클래스들로 만들어 :Model 
사용자에게 보여주는 화면처리jsp : view
사용자가 어떤 서비스를 원하는지 파악, 필요한 데이터(Model) 설정: Controller

이 Controller 는 서블릿으로 만들자 
 
<<웹어플리케이션 한글처리를 위한 인코딩 설정>>
Server==> Server.xml
 connector 노드를 찾아서 URIEncoding="utf-8" 추가! 

<<서비스 요청방식>>
get : 주소표시줄에 직접 입력하고 엔터를 쳐서 서비스를 요청하는 방식 
       a 태그의 링크를 눌러서 서비스를 요청하는 방식
 
post :  입력양식의 method가 post 일때만 post 방식.

<<jsp의 요청>>
우리가 jsp 문서를 요청하면 
사실은 톰켓이 내부저으로 서블릿을 만들어 줍니다.
즉 main.jsp 를 요청하면 main_jsp.java 와 main_jsp.class가 생성이 되고 이것이 서비스 되는 것입니다. 

만약, 간혹 우리가 jsp를 실습함에 있어 변경된 내용이 적용이 되지 않을 때에는 생성된 
서블릿을 삭제하고 다시 시도하면 servelt 이 새로 만들어 진다. 

최초의 jsp 를 요청하면 .java도 만들고 .class도 만들어야 하니 
속도가 다소 늦을 수 있다. 
그러나 두번째 이후에 요청할 때는 이미 만들어진 .class를 서비스하기 때문에
속도가 느리지 않다. 

<<jsp 내장객체>>
jsp 문서를 요청하면 내부적으로 서블릿이 생성되는데 
그 서블릿의 실제 서비스를 위한 메소드의 매개변수와
지역변수들은 모두 jsp의 내장객체들이다. 
즉,jsp 문서 내에서 별도로 객체를 생성하지 않고 바로 사용할 수 있다. 

request* 사용자의 요청정보를 담고있는 객체
response* 응답을 위한 객체
pageContext
session* 사용자의 상태유지를 위한 객체
application* 전체 어플리케이션의 상태유지를 위한 객체
config
out* 자바문법 안에서 출력을 위한 객체 
page 
exception* 예외에 대한 정보 갖고 있는 객체 


<<jsp 문장 구성요소>>
<%@ 	지시자
	<%@ page 인코딩타입, import 문
	<%@ include 이미 있는 다른 jsp를 현재문서에 포함 시킨다. 
	<%@ taglib 자바문법을 대신하는 태그를 사용하기 위한 표현 

<% 	스트립트릿: 자바문법을 표현하기 위한 요소
<%= 	표현식: 출력을 위한 요소 
<%! 	선언문: 변수를 선언하거나 메소드를 정의할 수 있다. 
	스크립트릿에서 선언한 변수와 선언문에서 선언한 변수는 뭐가다른지?
	: 선언문의 변수는 서블릿클래스의 멤버변수가 되고 
	스크립트릿의 변수는 서비스 메소드의 지역변수가 된다.
	
	즉, 선언문에는 서블릿 클래스의 멤버를 정의하는 곳이라서
	일반 문장(if, for) 는 올 수 없다. 
<<JSP 액션 태그>>
<jsp:useBean	JSP문서에서 자바객체를 생성
<jsp:setProperty	setter의 호출
<jsp:getProperty	getter의 호출
<jsp:include	다른 jsp를 현재의 문서에 포함시키는거 
<jsp:forward	다른 jsp로 이동시킬때 사용
<jsp:param 	<jsp:include  나 
		<jsp:forward 의 자식요소로 와서 
		포함되는 문서나 이동되는 문서에 
		값을 전달하는 요소로 사용	

<<Bean>>
웹에서 생성되는 자바 클래스를 보통 Bean 이라고 표현한다. 
무엇인가 정보를 담을 수 있는 객체를 보통 Bean 이라고 한다. 

<< 지시자 include와 액션태그 include>>
둘다 다른 jsp를 포함시킨다. 
- 액션태그 include 는 별도의 servlet 이 생성이 되고 실행 결과가 포함된다.
   포함되는 문서 자체가 완전해야한다.

- 지시자  include 는 별도의 servlet 이 생성되지 않는다 문서 내용이 포함, 하나의 servlet 이 만들어진다.
문서 일부분이 포함되는 구조. 완전하지 않아도 ㅇㅋ

 
<<jsp 내장 객체>>
- request: 사용자의 요청정보를 담고있는 객체 

getParameter(): 사용자가 요청한 입력갑을 읽어오는 메소드 String 반환

setCharacterEncoding("utf-8");
: 사용자의 입력값이 한글일때 인코딩을 설정해야 합니다. 

getParameter("파라메터이름");
: 사용자가 요청한 입력값을 읽어오는 메소드
String

getParameterVaules("파라메터이름")
: 여러가지 밸류를 받아올때 사용

getRemoteAddr()
: 요청한 사용자의 ip를 반환한다. 

getRequestURL();
: 주소표시줄에 요청한 주소 전체를 반환하는 메소드 

getRequestURI();
: 주소표시줄에 요청한 URL 중에 프로토콜, 도메인 네임, 
포트번호 제외한 프로젝트 이름부터 반환하는 메소드 

getParameterNames();
: 파라메터 이름들을 Enumeration 으로 반환해줌
