0825

<< 상태유지 기법 >>

http는 "무상태 서버"입니다. 

그래서 우리가 서비스를 제공함에 있어 사용자의 상태를 
유지 시킬 필요가 있어요. 예를 들어 이 회원이 로그인을 한 상태인지, 혹은 
이 회원이 투표를 했는지? 등 어떤 일처리에 있어 회원의 상태를 유지 시켜야 할 
필요가 있어요. 

그것을 위해서 일반적으로  jsp내장객체인 
request
session
application 을 사용할 수 있어요.

각각의 객체는 상태유지의 유효범위(scope)이 달라요.

request는 일반적으로 다음 이동되는 view페이지까지 유지되어요.
session은 브라우저를 닫기 전까지 유지되어요.
application는 서버를 종료하기 전까지 유지되어요.

또 request는 일반적으로 mvc 패턴에서 사용자의 요청처리 결과 데이터를 상태유지 시키고
view 페이지로 이동시킬 때 사용한다. 

크게보면 상태유지 기법으로 볼 수 있으나 
일반적으로 사람들이 말하는 "상태유지기법" 에는 
session을 말하는 경향들이 있다. 

===================================================================
<<session의 사용>> 
- session 변수의 값을 설정한다. 
- session.setattribute (속성명, 속성값) 
==>속성값은 어떤 자료형이라도 가능하다. 
session 변수에 설정된 값을 읽어와요. 
session.getAttribute("속성명");


<<filter>>
사용자가 어떤 요청을 가로채어서 그 요청을 실행하기 전에 
먼저 어떤 일을 처리하도록 하기 위한 기술

http://192.168.0.49:8080/Day0825_3/Member/listBoard.jsp

<<loginfilter에서의 경로오류>>

http://192.168.0.49:8080/Day0825_3/member/listBoard.jsp
http://192.168.0.49:8080/Day0825_3/login.jsp


jsp 
request
response
session
out

<<jsp내장객체>
jsp 문서의 오류처리를 위한 문서에 page 지시자에
isErrorPage="true"라고 설정한 문서에만 생성되는 내장객체이며
예외에 정보를 갖고 있습니다. 
그러나 존재하지 않는 url을 요청하는 오류에 대한 처리 
즉 404 오류에대한 처리를 위한 문서에는 
isErrorpage="true" 를 설정할 수 없다. 

<<session 과 application>>

session 과 application 모두 jsp 내장객체이며 
상태유지를 위하여 사용한다. 
사용방법은 동일하며 값을 설정하기 위해서는 
setAttribute 값을 읽어오기 위해서는 getAttribute을 이용한다. 

그러나 session은 사용자마다 별도의 메모리 공간이 할당되며
applicaton은 모든 사용자가 공동으로 사용하는 기억공간이다 
session은 세선을 파기하거나 브라우저를 닫기 전까지 유효하며
application 은 서버를 종료하기 전까지 유효하다. . 

<<jsp 학습내용>>
- 웹 어플리케이션 동작방식
- 웹 어플리케이션의 목적
- 자바 기반의 웹프로그래밍
 -->서블릿, jsp
- 서블릿 기반 웹프로그래밍
- get 방식, post 방식
- jsp 동작방식 
- jsp 문장 구성요소 
 스크립트릿, 표현식, 선언문, 
  지시자==> page, include, taglib 
  액션태그 ==> <jsp:usebean>
	       <jsp:setProperty>
	       <jsp:include>
	        <jsp:forward>	
	       <jsp:param>

 jsp 내장객체
request
response
session
application
out
exception

-session 을 위한 상태유지 
- 로그인처리
- 게시판 crud
- 파일 업로드
- 상품 관리 
- filter 적용

- 쿠키 
- MVC 패턴 적용한 게시판
- 계층형 게시판
- 페이징 처리 
- Listner


<<쿠키와 세션>>
쿠키와 세션은 모두 상태유지를 위한 기법
쿠키는 사용자의 정보를 사용자의 하드디스크에 기록하는 방식
세션은 사용자의 정보를 서버에 기록하는 방식
쿠키는 사용자의 하드디스크에 기록되기 때문에 보안유지상 중요한 정보를 기록하기에는 부적합하다. 
또 세션은 내장객체가 제공되지만 쿠키는 내장겍체가 제공되지 않아 필요하다면
객체를 생성해야 한다. 
그리고 쿠키에 기록할 수 있는 것은 문자열만 가능 
그러나 세션은 어떠한 자료형 이라도 기록 할 수 있다. 

<<쿠키의 사용>>
쿠키 생성
Cookie c = new Cookie("변수명","값");

쿠키 유효기간 설정
c.setMaxAge(초단위);
c.setMaxAge(60*60*24);

쿠키의 기록
response.addCookie(c);

- 쿠키값의 확인
1) 요청한 클라이언트의 모든 쿠키를 다 갖고온다. 
Cookie []cookies = request.getCookies();
	if(c.getName().equals("쿠키이름")) {
	
  }		
}

2) 모든 쿠키들을 순회하면서 그 쿠키가 설정한 쿠키인지 검사한다. 
if(cookies != null) {
for(Cookie c :cookies) {
	if(c.getName().equals("쿠키이름")){	
	String value = c.getValue();
	처리..
   }  
 }
}

